#!/bin/sh

# Script de d√©marrage pour AMD Parc Informatique
# D√©marre le backend et le frontend

set -e

echo "üöÄ D√©marrage d'AMD Parc Informatique..."

# Fonction pour d√©marrer le backend
start_backend() {
    echo "üì° D√©marrage du backend..."
    cd /app/backend
    
    # V√©rifier que les variables d'environnement sont d√©finies
    if [ -z "$DATABASE_URL" ]; then
        echo "‚ùå ERREUR: DATABASE_URL n'est pas d√©finie"
        exit 1
    fi
    
    if [ -z "$JWT_SECRET" ]; then
        echo "‚ùå ERREUR: JWT_SECRET n'est pas d√©finie"
        exit 1
    fi
    
    # Ex√©cuter les migrations si n√©cessaire
    if [ "$RUN_MIGRATIONS" = "true" ]; then
        echo "üîÑ Ex√©cution des migrations..."
        npm run db:migrate
    fi
    
    # Ex√©cuter le seeding si n√©cessaire
    if [ "$RUN_SEEDING" = "true" ]; then
        echo "üå± Ex√©cution du seeding..."
        npm run db:seed
    fi
    
    # D√©marrer le serveur backend
    echo "‚úÖ Backend d√©marr√© sur le port $PORT"
    exec npm start
}

# Fonction pour d√©marrer le frontend
start_frontend() {
    echo "üåê D√©marrage du frontend..."
    cd /app
    
    # V√©rifier que l'URL de l'API est d√©finie
    if [ -z "$NEXT_PUBLIC_API_URL" ]; then
        echo "‚ö†Ô∏è  AVERTISSEMENT: NEXT_PUBLIC_API_URL n'est pas d√©finie"
        echo "   Utilisation de l'URL par d√©faut: https://api.amd-parc.blueprint.com"
        export NEXT_PUBLIC_API_URL="https://api.amd-parc.blueprint.com"
    fi
    
    # D√©marrer le serveur frontend
    echo "‚úÖ Frontend d√©marr√© sur le port 3000"
    exec npx serve@latest out --listen 3000
}

# Fonction pour d√©marrer les deux services
start_both() {
    echo "üîÑ D√©marrage des deux services..."
    
    # D√©marrer le backend en arri√®re-plan
    start_backend &
    BACKEND_PID=$!
    
    # Attendre que le backend soit pr√™t
    echo "‚è≥ Attente du d√©marrage du backend..."
    sleep 10
    
    # V√©rifier que le backend r√©pond
    if curl -f http://localhost:$PORT/api/health > /dev/null 2>&1; then
        echo "‚úÖ Backend pr√™t"
    else
        echo "‚ùå Backend ne r√©pond pas"
        exit 1
    fi
    
    # D√©marrer le frontend
    start_frontend &
    FRONTEND_PID=$!
    
    # Attendre que les deux processus se terminent
    wait $BACKEND_PID $FRONTEND_PID
}

# Gestion des signaux
trap 'echo "üõë Arr√™t des services..."; kill $BACKEND_PID $FRONTEND_PID 2>/dev/null; exit 0' TERM INT

# D√©terminer quel service d√©marrer
case "$SERVICE_TYPE" in
    "backend")
        start_backend
        ;;
    "frontend")
        start_frontend
        ;;
    "both"|"")
        start_both
        ;;
    *)
        echo "‚ùå ERREUR: SERVICE_TYPE invalide: $SERVICE_TYPE"
        echo "   Valeurs accept√©es: backend, frontend, both"
        exit 1
        ;;
esac
