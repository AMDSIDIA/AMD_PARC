'use client';

import { useState, useEffect, useCallback } from 'react';
import Link from 'next/link';
import IncidentManagement from '../../components/IncidentManagement';
import InventoryManagement from '../../components/InventoryManagement';

interface Incident {
  ticketId: string;
  descriptionSouci: string;
  prenom: string;
  nom: string;
  priorite: string;
  status: string;
  assignedTo: string;
}

interface Technician {
  id: string;
  name: string;
}

interface InventoryItem {
  id: string;
  name: string;
  type: string;
  status: string;
  condition: string;
  assignedTo: string | null;
}

export default function GestionTechnique() {
  const [incidents, setIncidents] = useState<Incident[]>([]);
  const [technicians, setTechnicians] = useState<Technician[]>([]);
  const [inventory, setInventory] = useState<InventoryItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [activeTab, setActiveTab] = useState('incidents');
  const [authToken, setAuthToken] = useState('');

  const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL;

  useEffect(() => {
    // Récupérer le token depuis le localStorage
    const token = localStorage.getItem('authToken');
    if (token) setAuthToken(token);
  }, []);

  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      const [incidentsRes, techniciansRes, inventoryRes] = await Promise.all([
        fetch(`${API_BASE_URL}/api/incidents`),
        fetch(`${API_BASE_URL}/api/technicians`),
        fetch(`${API_BASE_URL}/api/inventory`)
      ]);

      if (!incidentsRes.ok) throw new Error('Erreur incidents');
      if (!techniciansRes.ok) throw new Error('Erreur techniciens');
      if (!inventoryRes.ok) throw new Error('Erreur inventaire');

      const incidentsData = await incidentsRes.json();
      const techniciansData = await techniciansRes.json();
      const inventoryData = await inventoryRes.json();

      setIncidents(incidentsData);
      setTechnicians(techniciansData);
      setInventory(inventoryData);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, [API_BASE_URL]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const handleAssignIncident = async (ticketId: string, technicianId: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/incidents/${ticketId}/assign`, {
        method: 'PATCH',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify({ technicianId }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message);
      }

      fetchData();
      alert('Incident assigné avec succès !');
    } catch (err) {
      alert(`Erreur: ${err.message}`);
    }
  };

  const handleUpdateIncidentStatus = async (ticketId: string, status: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/incidents/${ticketId}/status`, {
        method: 'PATCH',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify({ status }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message);
      }

      fetchData();
      alert('Statut mis à jour !');
    } catch (err) {
      alert(`Erreur: ${err.message}`);
    }
  };

  const handleAddInventoryItem = async (item: any) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/inventory`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(item),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message);
      }

      fetchData();
      return true;
    } catch (err) {
      throw new Error(err.message);
    }
  };

  // [Le reste du code identique à votre version fournie]
  // ... (JSX avec onglets et navigation)
}